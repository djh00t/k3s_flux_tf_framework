---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 1m
  timeout: 15m
  chart:
    spec:
      version: "43.x"
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 60m
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  values:
    alertmanager:
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "pushover"
            pushover_configs:
              - token: "${SECRET_PUSHOVER_ALERT_MANAGER_APIKEY}"
                user_key: "${SECRET_PUSHOVER_USERKEY}"
                send_resolved: true
                html: true
                priority: |-
                  {{ if eq .Status "firing" }}1{{ else }}0{{ end }}
                url_title: View in Alert Manager
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }}
                message: |-
                  {{- range .Alerts }}
                    {{- if ne .Labels.severity "" }}
                      <b>Severity:</b> <i>{{ .Labels.severity }}</i>
                    {{- else }}
                      <b>Severity:</b> <i>N/A</i>
                    {{- end }}
                    {{- if ne .Annotations.description "" }}
                      <b>Description:</b> <i>{{ .Annotations.description }}</i>
                    {{- else if ne .Annotations.summary "" }}
                      <b>Summary:</b> <i>{{ .Annotations.summary }}</i>
                    {{- else if ne .Annotations.message "" }}
                      <b>Message:</b> <i>{{ .Annotations.message }}</i>
                    {{- else }}
                      <b>Description:</b> <i>N/A</i>
                    {{- end }}
                    {{- if gt (len .Labels.SortedPairs) 0 }}
                      <b>Details:</b>
                      {{- range .Labels.SortedPairs }}
                        â€¢ <b>{{ .Name }}:</b> <i>{{ .Value }}</i>
                      {{- end }}
                    {{- end }}
                  {{- end }}
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "pushover"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "pushover"
              matchers:
                - severity = "critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
          # type of authentication
          nginx.ingress.kubernetes.io/auth-type: basic
          # name of the secret that contains the user/password definitions
          nginx.ingress.kubernetes.io/auth-secret: basic-auth
          # message to display with an appropriate context why the authentication is required
          nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
        pathType: Prefix
        ingressClassName: "nginx"
        hosts:
          - &host "alert-manager-${CONFIG_INFRA_CLUSTER}.${CONFIG_INFRA_DOMAIN}"
        tls:
          - hosts:
              - *host
            secretName: cert-manager-wildcard-${CONFIG_INFRA_DOMAIN}
      alertmanagerSpec:
        replicas: 1
        podAntiAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ${CONFIG_STORAGE_CLASS}
              resources:
                requests:
                  storage: 1Gi


    grafana:
      adminPassword: ${SECRET_GRAFANA_ADMIN_PASSWORD}
      ingress:
        enabled: true
        path: "/"
        annotations:
          kubernetes.io/ingress.class: "nginx"
          # type of authentication
          nginx.ingress.kubernetes.io/auth-type: "basic"
          # name of the secret that contains the user/password definitions
          nginx.ingress.kubernetes.io/auth-secret: "basic-auth"
          # message to display with an appropriate context why the authentication is required
          nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
        hosts:
          - &domain grafana-${CONFIG_INFRA_CLUSTER}.${CONFIG_INFRA_DOMAIN}
        tls:
          - secretName: cert-manager-wildcard-${CONFIG_INFRA_DOMAIN}
            hosts:
              - *domain

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    prometheus:
      prometheusSpec:
        securityContext:
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
          fsGroup: 0
        replicas: 1
        replicaExternalLabelName: __replica__
        externalLabels:
          cluster: ${CONFIG_INFRA_DOMAIN}
        thanos:
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          image: quay.io/thanos/thanos:v0.30.0
          version: "v0.29.0"
        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 14d
        retentionSize: 45GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ${CONFIG_STORAGE_CLASS}
              resources:
                requests:
                  storage: 50Gi
        resources:
          requests:
            cpu: 10m
            memory: 2000Mi
          limits:
            memory: 8000Mi
        additionalScrapeConfigs:
          - job_name: pve
            scrape_interval: 1m
            scrape_timeout: 30s
            honor_timestamps: true
            metrics_path: /pve
            static_configs:
              - targets:
                  - "172.24.0.1:9221"
          - job_name: blackbox
            metrics_path: /probe
            params:
              module:
                - http_2xx
            static_configs:
              - targets:
                  - https://google.com.au
                  - https://cloudflare.com
            relabel_configs:
              - source_labels:
                  - __address__
                target_label: __param_target
              - source_labels:
                  - __param_target
                target_label: target
              - target_label: __address__
                replacement: blackbox-exporter-prometheus-blackbox-exporter.monitoring:9115
          - job_name: 'if_mib'
            static_configs:
              - targets:
                  - 172.18.1.21
                  - 172.18.1.22
                  - 172.18.1.23
            metrics_path: /snmp
            params:
              module:
                - if_mib
            relabel_configs:
              - source_labels:
                  - __address__
                target_label: __param_target
              - source_labels:
                  - __param_target
                target_label: instance
              - target_label: __address__
                replacement: snmp-exporter-prometheus-snmp-exporter:9116
